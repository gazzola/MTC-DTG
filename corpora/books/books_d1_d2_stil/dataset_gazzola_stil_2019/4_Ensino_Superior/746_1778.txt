 Fizemos uma implementação em Apache Hadoop 1.0.4, usando linguagem Java. O Hadoop tem o recurso HDFS (Hadoop Distributes File System) para armazenamento de dados. A versão do GraphLab utilizada foi a 2.1.4434, e a versão do MPI foi o MPICH2 versão 1.2.1. Além disso foi utilizado o daemon NFS do Linux para compartilhar as bases de dados. Fizemos uma implementação em Apache Hadoop 1.0.4, usando linguagem Java. O Hadoop tem o recurso HDFS (Hadoop Distributes File System) para armazenamento de dados. A implementação foi feita em linguagem C++, com o objetivo de ser mais genérica possível, podendo executar em qualquer tipo de grafo. // Estruturas de Dados
typedef double Vertice;
typedef graphlab::empty Aresta;
typedef graphlab::distributed_graph<Vertice, Aresta> Grafo;
// Algoritmo
class PageRank :
void pagerank_valor_inicial(Grafo::vertex_type& vertice) {
// Saida
class pagerank_writer {
// Main
int main(int argc, char** argv) {
Foi utilizado bases de dados gerada aleatoriamente utilizando algoritmo de geração de grafos aleatórios . Os números de vértices utilizados foram variados de 100 mil até 900 mil, com a probabilidade de formação de aresta fixa em 0.0001. Também foi utilizada uma base de dados real coleatada da rede social do Google+, mas por motivos de tempo não foi possível a avaliação da execução. Nesta análise medimos o tempo de execução do algoritmo variando o tamanho da entrada, ou seja, o número de vértices no Grafo. No grafo abaixo fizemos a avaliação para diversas configurações de processamento, variando de 1 nodo de processamento até 8. Podemos observar que o crescimento quadrático está presente em todas as configurações, contunde com a complexidade do algoritmo. Neste gráfico está representado o valor de speedup em relação a configuração de 1 nodo de processamento e 8 nodos de processamento (4 máquinas virtuais com 2 núcleos cada). É interessante observar que para valores abaixo de 500 mil nodos o uso de processamento paralelo não é vantajoso (speedup < 1), devido ao "overhead" causado pelo framework. Nesta análisa avaliamos o comportamento do algoritmo quando adicionamos diferentes números de núcleos de processamento. Podemos observar na figura abaixo que o algoritmo é razoavelmente escalável, indicando que o aumento de nodos para para processamento paralelo vale a pena e pode ser realizado facilmente para melhorar o desempenho do algoritmo. Nesta análisase contabilizamos o número de iterações necessárias para a conversão do algoritmo. Podemos observar que para valores de entrada maiores o número de iteraçoes é menor, indicando uma conversão mais rápida em termos do número de iterações, apesar do tempo de execução ser maior. A utilização do framework GraphLab teve resultados satisfatórios. A programação é relativamente fácil, apesar da configuração e instalação no sistema demandar tempo. O Hadoop, apesar da implementação do PageRank ser possível, não é tão trivial. Se levarmos em conta a facilidade de programação e o desempenho do algoritmo, escolheríamos o framework GraphLab ao invés do Hadoop. Isso mostra que o Hadoop não é bom em todas as situações.