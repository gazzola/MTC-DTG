 Portanto, cada venda tem aproximadamente 41,1 alterações. O tamhno ocupado pela coleção é de 25,43 GB. Os dados foram particionados em três máquinas virtuais, cada uma com 8GB de RAM e 10GB de HD. O campo de particionamento foi o "_fim". Isso possibilita que todos os dados atuais da base (que tem o campo "_fim" nulo) fiquem na mesma máquina, proporcionando um ganho de performance para consultas no estado atual da base. Foram criados índices nos campos de "_inicio", "_fim" e "_id_pai". Esses índices são usados em praticamente todas as consultas temporais e otimizam as consultas em estados antigos da base de dados. Para testar a performance do banco de dados, foram selecionadas duas consultas de agregação. A primeira consulta calcula a média dos preços dos elevadores no estado atual da base. A segunda consulta calcula a média dos preços dos elevadores no estado da base do dia 20/06/2011. A primeira consulta executou em 0,922 segundos e pesquisou 48.117 documentos quando executada em um ambiente de uma única máquina. Quando executada em um ambiente de 3 máquinas, foram gastos 0,987 segundos e 48.117 documentos foram consultados. O gráfico abaixo mostra este resultado. LINK PARA O GRAFICO 1 (EPS) LINK PARA O GRAFICO 1 (PNG) O tempo de execução da primeira consulta em ambiente com várias máquinas e ambiente com uma máquina apenas é quase igual porque é uma consulta no estado atual da base e o particionamento horizontal garante que os dados atuais fiquem agrupados na mesma máquina. A segunda consulta executou em 1.291 segundos e pesquisou 453.839 documentos quando executada em um ambiente de uma única máquina. Quando executada em um ambiente de 3 máquinas, foram gastos 1.677 segundos e 453.839 documentos foram consultados. O gráfico abaixo mostra este resultado. LINK PARA O GRAFICO 2 (EPS) LINK PARA O GRAFICO 2 (PNG) O tempo de execução da consulta temporal é baixo porque os índices nos meta campos "_inicio" e "_fim" garantem que o mínimo de decoumentos possíveis sejam consultados para simular o estado passado do banco de dados. = Conclusão = Este trabalho introduziu funcionalidades temporais em bancos de dados NoSQL de forma escalável.