 A função de mapeamento, nesse caso, deve então quebrar a linha em palavras e emitir um valor unitário para cada palavra (como que contando aquela ocorrência):
No modelo original do MapReduce, codice_5 é a função usada para produzir novos pares chave/valor de saída, que seriam então armazenados em um novo arquivo, novamente sobre o Google File System. A função de redução então receberia uma lista de uns para cada palavra encontrada no texto e bastaria então contar (somar) todos os valores recebidos:
O resultado final, então, serão pares de palavras e inteiros indicando o número de vezes que cada palavra foi encontrada. Apesar de sua relativa simplicidade, a grande aceitação do modelo se deveu em parte à facilidade com que questões como o aproveitamento de paralelismo em diversos níveis (p.ex., máquinas "multicore" em um "cluster"), balanceamento de carga e tolerância a falha são facilmente tratados. Para melhor aproveitar o poder computacional de cada nó de processamento, o modelo permite ainda a definição de uma função codice_6, que serve para realizar o pré-processamento das listas de valores gerados por cada nó que executa a função codice_1, quando esse processamento pode reduzir o volume de comunicação entre nós. Essa função pode ser usada para já gerar um valor agregado para todos os valores associados por cada chave em um nó, de forma que apenas um valor precise ser enviado para os nós redutores para cada chave. No caso do programa codice_4, o mesmo código da função codice_2 poderia ser usado: todas as ocorrências de uma dada palavra em um nó seriam combinadas e ao invés de enviar uma lista de uns para o redutor, cada nó já enviaria o resultado da contagem (soma) da lista local para o redutor, que continuaria somando os valores recebidos dos vários nós de codice_1 para obter a contagem final. O balanceamento de carga e a tolerância a falhas são obtidos por um mesmo mecanismo: o sistema acompanha o término das tarefas no sistema e quando começa a ter recursos desocupados re-edita tarefas que ainda não foram completadas, aproveitando o primeiro resultado que se torne disponível.