 Para cada lista de vértice recebida, é realizado o processamento sobre a lista e, caso necessário, a lista com o novo vértice é encaminhada para as arestas de saída. Os métodos implementados no código a seguir fornecem a implementação necessário no modelo GraphChi para oferecer uma abstração do término de execução da aplicação com base nos vértices estarem ativos ou não, semelhante ao modelo Pregel. Os métodos a seguir apresentam algumas funções úteis para o algoritmo principal e algumas delas auxiliam na abstração de passagem de mensagens. Observe que o método "outputCycle" é apenas uma ilustração. Esse método deve receber uma lista contendo os "ID"s dos vértices que representam um ciclo, e executar alguma computação sobre o ciclo recebido, que melhor convir para a aplicação em questão. GraphChi é uma solução razoável em termos de custo e benefício. Apesar de não apresentar escalabilidade em termos de nós de computação, apresenta certa escalabilidade em relação ao tamanho dos dados de entrada, devido sua característica de trabalhar em disco (memória secundária). Os experimentos foram realizados em uma aplicação de exemplo, usado a implementação do sistema GraphChi, para encontrar grupos de números sociáveis, também chamados de "aliquot cycles", estudados em Teoria dos Números. O grafo é uma representação de um subconjunto dos números naturais relacionados pela soma dos seus divisores próprios, também chamada de "aliquot sum". Grupos sociáveis são ocorrências raras nos números naturais. O primeiro grupo sociável de ordem maior ou igual a dois é o par amigável (220, 284), o segundo grupos sociável é (1184, 1210). O primeiro experimento foi executado para um grafo de 4544641 vértices. O tempo total para execução de todas as iterações foi de 70,7115 segundos (1,18 minutos), realizando um total de 64 iterações, com tempo médio de 1,08787 segundos para processar cada vértice a cada iteração. Para esse grafo de 4544641 vértices, basicamente representando o intervalo de números naturais [0, 4544641], foram encontrados 49 grupos sociáveis de ordem maior ou igual a dois. O segundo experimento foi executado para um grafo de 13485277 vértices. O tempo total para a execução de todas as iterações foi de 326,722 segundos (5,45 minutos), realizando um total de 79 iterações, com tempo médio de 4,08402 segundos para processar cada vértice a cada iteração. Para esse grafo de 13485277 vértices, basicamente representando o intervalo de números naturais [0, 13485277], foram encontrados 71 grupos sociáveis de ordem maior ou igual a dois. O segundo experimento foi executado para um grafo de 16875505 vértices. O tempo total para a execução de todas as iterações foi de 367,872 segundos (6,13 minutos), realizando um total de 87 iterações, com tempo médio de 4.18037 segundos para processar cada vértice a cada iteração. Para esse grafo de 13485277 vértices, basicamente representando o intervalo de números naturais [0, 16875505], foram encontrados 76 grupos sociáveis de ordem maior ou igual a dois. O segundo experimento foi executado para um grafo de 18109729 vértices. O tempo total para a execução de todas as iterações foi de 433,687 segundos (7,23 minutos), realizando um total de 87 iterações, com tempo médio de 4,92826 segundos para processar cada vértice a cada iteração. Para esse grafo de 18109729 vértices, basicamente representando o intervalo de números naturais [0, 18109729], foram encontrados 78 grupos sociáveis de ordem maior ou igual a dois.